// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/list-negativated": {
            "get": {
                "description": "list negativated",
                "produces": [
                    "application/json"
                ],
                "summary": "DEPRECATED",
                "operationId": "deprecated-list-negativated",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "slice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "503": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/negativated": {
            "get": {
                "description": "lists negativated amounts",
                "produces": [
                    "application/json"
                ],
                "summary": "Lists negativated",
                "operationId": "list-negativated",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "slice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "503": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    }
                }
            },
            "put": {
                "description": "updates a negativated client",
                "produces": [
                    "application/json"
                ],
                "summary": "Updates negativation",
                "operationId": "update-negativated",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "slice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "503": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    }
                }
            },
            "post": {
                "description": "creates a negativated client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Negativation Creation",
                "operationId": "negativate",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "slice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "503": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/negativated/{id}": {
            "get": {
                "description": "get negativated by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "DEPRECATED",
                "operationId": "deprecated-get-negativated-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Negativation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/negativations.Negativations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "503": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes a negativated by its id",
                "produces": [
                    "application/json"
                ],
                "summary": "Deletes a negativated",
                "operationId": "delete-negativated-by-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "slice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "503": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "checks server health",
                "produces": [
                    "application/json"
                ],
                "summary": "Health check",
                "operationId": "ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.SuccessfulPing"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorStruct"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ErrorStruct": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "controllers.SuccessfulPing": {
            "type": "object",
            "properties": {
                "full-path": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "negativations.Negativations": {
            "type": "object",
            "properties": {
                "companyDocument": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "contract": {
                    "type": "string"
                },
                "customerDocument": {
                    "type": "string"
                },
                "debtDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "inclusionDate": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
