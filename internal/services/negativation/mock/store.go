// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Pietroski/TT-SERASA-Golang-NegativationAPI/internal/services/negativation (interfaces: Store)

// Package mock_negativation is a generated GoMock package.
package mock_negativation

import (
	context "context"
	reflect "reflect"

	negativations "github.com/Pietroski/TT-SERASA-Golang-NegativationAPI/internal/services/negativation"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteNegativated mocks base method.
func (m *MockStore) DeleteNegativated(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNegativated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNegativated indicates an expected call of DeleteNegativated.
func (mr *MockStoreMockRecorder) DeleteNegativated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNegativated", reflect.TypeOf((*MockStore)(nil).DeleteNegativated), arg0, arg1)
}

// GetNegativatedByID mocks base method.
func (m *MockStore) GetNegativatedByID(arg0 context.Context, arg1 int64) (negativations.Negativations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNegativatedByID", arg0, arg1)
	ret0, _ := ret[0].(negativations.Negativations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNegativatedByID indicates an expected call of GetNegativatedByID.
func (mr *MockStoreMockRecorder) GetNegativatedByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNegativatedByID", reflect.TypeOf((*MockStore)(nil).GetNegativatedByID), arg0, arg1)
}

// ListNegativated mocks base method.
func (m *MockStore) ListNegativated(arg0 context.Context, arg1 negativations.ListNegativatedParams) ([]negativations.Negativations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNegativated", arg0, arg1)
	ret0, _ := ret[0].([]negativations.Negativations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNegativated indicates an expected call of ListNegativated.
func (mr *MockStoreMockRecorder) ListNegativated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNegativated", reflect.TypeOf((*MockStore)(nil).ListNegativated), arg0, arg1)
}

// Negativate mocks base method.
func (m *MockStore) Negativate(arg0 context.Context, arg1 negativations.NegativateParams) (negativations.Negativations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Negativate", arg0, arg1)
	ret0, _ := ret[0].(negativations.Negativations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Negativate indicates an expected call of Negativate.
func (mr *MockStoreMockRecorder) Negativate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Negativate", reflect.TypeOf((*MockStore)(nil).Negativate), arg0, arg1)
}

// UpdateNegativated mocks base method.
func (m *MockStore) UpdateNegativated(arg0 context.Context, arg1 negativations.UpdateNegativatedParams) (negativations.Negativations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNegativated", arg0, arg1)
	ret0, _ := ret[0].(negativations.Negativations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNegativated indicates an expected call of UpdateNegativated.
func (mr *MockStoreMockRecorder) UpdateNegativated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNegativated", reflect.TypeOf((*MockStore)(nil).UpdateNegativated), arg0, arg1)
}
